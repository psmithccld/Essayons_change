// Using SendGrid integration blueprint
import { MailService } from '@sendgrid/mail';

if (!process.env.SENDGRID_API_KEY) {
  console.warn("SENDGRID_API_KEY environment variable not set - email notifications disabled");
}

const mailService = new MailService();
if (process.env.SENDGRID_API_KEY) {
  mailService.setApiKey(process.env.SENDGRID_API_KEY);
}

interface EmailParams {
  to: string;
  from: string;
  subject: string;
  text?: string;
  html?: string;
}

export async function sendEmail(params: EmailParams): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    console.log('Email notification skipped - SendGrid not configured');
    return false;
  }

  try {
    await mailService.send({
      to: params.to,
      from: params.from,
      subject: params.subject,
      text: params.text || '',
      html: params.html || '',
    });
    console.log(`Email sent successfully to ${params.to}`);
    return true;
  } catch (error) {
    console.error('SendGrid email error:', error);
    return false;
  }
}

export async function sendTaskAssignmentNotification(
  assigneeEmail: string, 
  taskName: string, 
  projectName: string, 
  dueDate?: string | null
): Promise<boolean> {
  const subject = `New Task Assigned: ${taskName}`;
  const text = `You have been assigned a new task "${taskName}" in project "${projectName}".${dueDate ? ` Due date: ${dueDate}` : ''}`;
  const html = `
    <h2>New Task Assignment</h2>
    <p>You have been assigned a new task:</p>
    <ul>
      <li><strong>Task:</strong> ${taskName}</li>
      <li><strong>Project:</strong> ${projectName}</li>
      ${dueDate ? `<li><strong>Due Date:</strong> ${dueDate}</li>` : ''}
    </ul>
    <p>Please check your project management dashboard for more details.</p>
  `;

  return sendEmail({
    to: assigneeEmail,
    from: 'noreply@changemanagement.com', // Should be configured in environment
    subject,
    text,
    html
  });
}

export async function sendFlyerDistribution(
  recipientEmail: string,
  flyerTitle: string,
  flyerContent: string,
  projectName: string,
  distributionMethod: string = 'email'
): Promise<boolean> {
  const subject = `Important Communication: ${flyerTitle}`;
  
  // Clean content for text version
  const textContent = flyerContent.replace(/<[^>]*>/g, '').replace(/\n+/g, '\n\n');
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #2E5266; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">${flyerTitle}</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">Change Initiative Communication</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <div style="color: #333333; line-height: 1.6; font-size: 16px;">
          ${flyerContent.split('\n').map(line => 
            line.trim() ? `<p style="margin-bottom: 15px;">${line.trim()}</p>` : ''
          ).join('')}
        </div>
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          <strong>Project:</strong> ${projectName}<br>
          This communication was sent via ${distributionMethod} distribution.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: `${flyerTitle}\n\n${textContent}\n\nProject: ${projectName}\nSent via ${distributionMethod} distribution.\n\nGenerated by Essayons Change Platform`,
    html
  });
}

export async function sendBulkFlyerDistribution(
  recipients: string[],
  flyerTitle: string,
  flyerContent: string,
  projectName: string,
  distributionMethod: string = 'email'
): Promise<{ sent: number; failed: number; results: Array<{ email: string; success: boolean; error?: string }> }> {
  const results: Array<{ email: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  // Send emails with rate limiting (SendGrid has rate limits)
  for (const email of recipients) {
    try {
      const success = await sendFlyerDistribution(email, flyerTitle, flyerContent, projectName, distributionMethod);
      if (success) {
        sent++;
        results.push({ email, success: true });
      } else {
        failed++;
        results.push({ email, success: false, error: 'Send failed' });
      }
      
      // Rate limiting: wait 100ms between emails to avoid hitting SendGrid limits
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      results.push({ 
        email, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}

export async function sendGroupEmail(
  recipientEmail: string,
  emailTitle: string,
  emailContent: string,
  projectName: string,
  raidLogInfo?: { title: string; type: string; description: string }[]
): Promise<boolean> {
  const subject = `Group Communication: ${emailTitle}`;
  
  // Clean content for text version
  const textContent = emailContent.replace(/<[^>]*>/g, '').replace(/\n+/g, '\n\n');
  
  // Build RAID log section if provided
  let raidSection = '';
  if (raidLogInfo && raidLogInfo.length > 0) {
    const raidHtml = raidLogInfo.map(item => `
      <div style="margin: 10px 0; padding: 15px; background-color: #f8f9fa; border-left: 4px solid #832c2c; border-radius: 4px;">
        <h4 style="margin: 0 0 8px 0; color: #832c2c; font-size: 16px;">${item.type.toUpperCase()}: ${item.title}</h4>
        <p style="margin: 0; color: #555; font-size: 14px; line-height: 1.4;">${item.description}</p>
      </div>
    `).join('');
    
    raidSection = `
      <div style="margin-top: 30px; padding-top: 20px; border-top: 2px solid #e9ecef;">
        <h3 style="color: #832c2c; font-size: 18px; margin-bottom: 15px;">Related Project Information</h3>
        ${raidHtml}
      </div>
    `;
  }

  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #832c2c; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">${emailTitle}</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">Change Initiative Group Communication</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <div style="color: #333333; line-height: 1.6; font-size: 16px;">
          ${emailContent.split('\n').map(line => 
            line.trim() ? `<p style="margin-bottom: 15px;">${line.trim()}</p>` : ''
          ).join('')}
        </div>
        
        ${raidSection}
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          <strong>Project:</strong> ${projectName}<br>
          This is a group communication from your change initiative team.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const textVersion = `${emailTitle}\n\nChange Initiative Group Communication\n\n${textContent}${raidLogInfo && raidLogInfo.length > 0 ? `\n\nRelated Project Information:\n${raidLogInfo.map(item => `${item.type.toUpperCase()}: ${item.title}\n${item.description}`).join('\n\n')}` : ''}\n\nProject: ${projectName}\nThis is a group communication from your change initiative team.\n\nGenerated by Essayons Change Platform`;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textVersion,
    html
  });
}

export async function sendBulkGroupEmail(
  recipients: string[],
  emailTitle: string,
  emailContent: string,
  projectName: string,
  raidLogInfo?: { title: string; type: string; description: string }[]
): Promise<{ sent: number; failed: number; results: Array<{ email: string; success: boolean; error?: string }> }> {
  const results: Array<{ email: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  // Send emails with rate limiting (SendGrid has rate limits)
  for (const email of recipients) {
    try {
      const success = await sendGroupEmail(email, emailTitle, emailContent, projectName, raidLogInfo);
      if (success) {
        sent++;
        results.push({ email, success: true });
      } else {
        failed++;
        results.push({ email, success: false, error: 'Send failed' });
      }
      
      // Rate limiting: wait 100ms between emails to avoid hitting SendGrid limits
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      results.push({ 
        email, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}