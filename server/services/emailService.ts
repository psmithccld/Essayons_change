// Using SendGrid integration blueprint
import { MailService } from '@sendgrid/mail';

if (!process.env.SENDGRID_API_KEY) {
  console.warn("SENDGRID_API_KEY environment variable not set - email notifications disabled");
} else {
  const keyPrefix = process.env.SENDGRID_API_KEY.substring(0, 3);
  console.log(`SendGrid API key detected with prefix: ${keyPrefix}...`);
  
  if (!process.env.SENDGRID_API_KEY.startsWith('SG.')) {
    console.error("SendGrid API key format error: Key must start with 'SG.'");
    console.error("Please verify your SendGrid API key is correct");
  }
}

const mailService = new MailService();
if (process.env.SENDGRID_API_KEY && process.env.SENDGRID_API_KEY.startsWith('SG.')) {
  try {
    mailService.setApiKey(process.env.SENDGRID_API_KEY);
    console.log("SendGrid email service initialized successfully");
  } catch (error) {
    console.error("SendGrid initialization error:", error);
  }
} else {
  console.warn("SendGrid not initialized due to invalid API key format");
}

interface EmailParams {
  to: string;
  from: string;
  subject: string;
  text?: string;
  html?: string;
  cc?: string; // Added CC support
}

export async function sendEmail(params: EmailParams): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    console.log('Email notification skipped - SendGrid not configured');
    return false;
  }

  try {
    const mailOptions: any = {
      to: params.to,
      from: params.from,
      subject: params.subject,
      text: params.text || '',
      html: params.html || '',
    };
    
    // Add CC if provided
    if (params.cc) {
      mailOptions.cc = params.cc;
    }
    
    await mailService.send(mailOptions);
    console.log(`Email sent successfully to ${params.to}${params.cc ? ` with CC to ${params.cc}` : ''}`);
    return true;
  } catch (error) {
    console.error('SendGrid email error:', error);
    return false;
  }
}

export async function sendTaskAssignmentNotification(
  assigneeEmail: string, 
  taskName: string, 
  projectName: string, 
  dueDate?: string | null
): Promise<boolean> {
  const subject = `New Task Assigned: ${taskName}`;
  const text = `You have been assigned a new task "${taskName}" in project "${projectName}".${dueDate ? ` Due date: ${dueDate}` : ''}`;
  const html = `
    <h2>New Task Assignment</h2>
    <p>You have been assigned a new task:</p>
    <ul>
      <li><strong>Task:</strong> ${taskName}</li>
      <li><strong>Project:</strong> ${projectName}</li>
      ${dueDate ? `<li><strong>Due Date:</strong> ${dueDate}</li>` : ''}
    </ul>
    <p>Please check your project management dashboard for more details.</p>
  `;

  return sendEmail({
    to: assigneeEmail,
    from: 'noreply@changemanagement.com', // Should be configured in environment
    subject,
    text,
    html
  });
}

export async function sendFlyerDistribution(
  recipientEmail: string,
  flyerTitle: string,
  flyerContent: string,
  projectName: string,
  distributionMethod: string = 'email'
): Promise<boolean> {
  const subject = `Important Communication: ${flyerTitle}`;
  
  // Clean content for text version
  const textContent = flyerContent.replace(/<[^>]*>/g, '').replace(/\n+/g, '\n\n');
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #2E5266; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">${flyerTitle}</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">Change Initiative Communication</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <div style="color: #333333; line-height: 1.6; font-size: 16px;">
          ${flyerContent.split('\n').map(line => 
            line.trim() ? `<p style="margin-bottom: 15px;">${line.trim()}</p>` : ''
          ).join('')}
        </div>
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          <strong>Project:</strong> ${projectName}<br>
          This communication was sent via ${distributionMethod} distribution.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: `${flyerTitle}\n\n${textContent}\n\nProject: ${projectName}\nSent via ${distributionMethod} distribution.\n\nGenerated by Essayons Change Platform`,
    html
  });
}

export async function sendBulkFlyerDistribution(
  recipients: string[],
  flyerTitle: string,
  flyerContent: string,
  projectName: string,
  distributionMethod: string = 'email'
): Promise<{ sent: number; failed: number; results: Array<{ email: string; success: boolean; error?: string }> }> {
  const results: Array<{ email: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  // Send emails with rate limiting (SendGrid has rate limits)
  for (const email of recipients) {
    try {
      const success = await sendFlyerDistribution(email, flyerTitle, flyerContent, projectName, distributionMethod);
      if (success) {
        sent++;
        results.push({ email, success: true });
      } else {
        failed++;
        results.push({ email, success: false, error: 'Send failed' });
      }
      
      // Rate limiting: wait 100ms between emails to avoid hitting SendGrid limits
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      results.push({ 
        email, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}

export async function sendGroupEmail(
  recipientEmail: string,
  emailTitle: string,
  emailContent: string,
  projectName: string,
  raidLogInfo?: { title: string; type: string; description: string }[]
): Promise<boolean> {
  const subject = `Group Communication: ${emailTitle}`;
  
  // Clean content for text version
  const textContent = emailContent.replace(/<[^>]*>/g, '').replace(/\n+/g, '\n\n');
  
  // Build RAID log section if provided
  let raidSection = '';
  if (raidLogInfo && raidLogInfo.length > 0) {
    const raidHtml = raidLogInfo.map(item => `
      <div style="margin: 10px 0; padding: 15px; background-color: #f8f9fa; border-left: 4px solid #832c2c; border-radius: 4px;">
        <h4 style="margin: 0 0 8px 0; color: #832c2c; font-size: 16px;">${item.type.toUpperCase()}: ${item.title}</h4>
        <p style="margin: 0; color: #555; font-size: 14px; line-height: 1.4;">${item.description}</p>
      </div>
    `).join('');
    
    raidSection = `
      <div style="margin-top: 30px; padding-top: 20px; border-top: 2px solid #e9ecef;">
        <h3 style="color: #832c2c; font-size: 18px; margin-bottom: 15px;">Related Project Information</h3>
        ${raidHtml}
      </div>
    `;
  }

  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #832c2c; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">${emailTitle}</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">Change Initiative Group Communication</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <div style="color: #333333; line-height: 1.6; font-size: 16px;">
          ${emailContent.split('\n').map(line => 
            line.trim() ? `<p style="margin-bottom: 15px;">${line.trim()}</p>` : ''
          ).join('')}
        </div>
        
        ${raidSection}
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          <strong>Project:</strong> ${projectName}<br>
          This is a group communication from your change initiative team.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const textVersion = `${emailTitle}\n\nChange Initiative Group Communication\n\n${textContent}${raidLogInfo && raidLogInfo.length > 0 ? `\n\nRelated Project Information:\n${raidLogInfo.map(item => `${item.type.toUpperCase()}: ${item.title}\n${item.description}`).join('\n\n')}` : ''}\n\nProject: ${projectName}\nThis is a group communication from your change initiative team.\n\nGenerated by Essayons Change Platform`;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textVersion,
    html
  });
}

export async function sendBulkGroupEmail(
  recipients: string[],
  emailTitle: string,
  emailContent: string,
  projectName: string,
  raidLogInfo?: { title: string; type: string; description: string }[]
): Promise<{ sent: number; failed: number; results: Array<{ email: string; success: boolean; error?: string }> }> {
  const results: Array<{ email: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  // Send emails with rate limiting (SendGrid has rate limits)
  for (const email of recipients) {
    try {
      const success = await sendGroupEmail(email, emailTitle, emailContent, projectName, raidLogInfo);
      if (success) {
        sent++;
        results.push({ email, success: true });
      } else {
        failed++;
        results.push({ email, success: false, error: 'Send failed' });
      }
      
      // Rate limiting: wait 100ms between emails to avoid hitting SendGrid limits
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      results.push({ 
        email, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}

export async function sendP2PEmail(
  recipientEmail: string,
  recipientName: string,
  emailTitle: string,
  emailContent: string,
  projectName: string,
  senderName: string,
  visibility: 'private' | 'team' | 'archive' = 'private',
  raidLogInfo?: { title: string; type: string; description: string }[],
  ccEmail?: string // Added CC parameter
): Promise<boolean> {
  const subject = `Personal Communication: ${emailTitle}`;
  
  // Clean content for text version
  const textContent = emailContent.replace(/<[^>]*>/g, '').replace(/\n+/g, '\n\n');
  
  // Build RAID log section if provided
  let raidSection = '';
  if (raidLogInfo && raidLogInfo.length > 0) {
    const raidHtml = raidLogInfo.map(item => `
      <div style="margin: 10px 0; padding: 15px; background-color: #f8f9fa; border-left: 4px solid #2E5266; border-radius: 4px;">
        <h4 style="margin: 0 0 8px 0; color: #2E5266; font-size: 16px;">${item.type.toUpperCase()}: ${item.title}</h4>
        <p style="margin: 0; color: #555; font-size: 14px; line-height: 1.4;">${item.description}</p>
      </div>
    `).join('');
    
    raidSection = `
      <div style="margin-top: 30px; padding-top: 20px; border-top: 2px solid #e9ecef;">
        <h3 style="color: #2E5266; font-size: 18px; margin-bottom: 15px;">Related Project Information</h3>
        ${raidHtml}
      </div>
    `;
  }

  // Visibility indicator
  const visibilityBadge = visibility === 'private' 
    ? '<span style="background-color: #dc3545; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: bold;">PRIVATE</span>'
    : visibility === 'team'
    ? '<span style="background-color: #ffc107; color: #000; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: bold;">TEAM VISIBLE</span>'
    : '<span style="background-color: #28a745; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; font-weight: bold;">ARCHIVED</span>';

  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #2E5266; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">${emailTitle}</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">Personal Communication - Change Initiative</p>
        <div style="margin-top: 10px;">${visibilityBadge}</div>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <div style="margin-bottom: 20px; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
          <p style="margin: 0; color: #2E5266; font-size: 16px;">
            <strong>Hi ${recipientName},</strong>
          </p>
        </div>
        
        <div style="color: #333333; line-height: 1.6; font-size: 16px;">
          ${emailContent.split('\n').map(line => 
            line.trim() ? `<p style="margin-bottom: 15px;">${line.trim()}</p>` : ''
          ).join('')}
        </div>
        
        ${raidSection}
        
        <div style="margin-top: 30px; padding: 15px; background-color: #f8f9fa; border-radius: 8px;">
          <p style="margin: 0; color: #2E5266; font-size: 16px;">
            <strong>Best regards,</strong><br>
            ${senderName}
          </p>
        </div>
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          <strong>Project:</strong> ${projectName}<br>
          This is a personal communication from your change initiative team.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const textVersion = `${emailTitle}\n\nPersonal Communication - Change Initiative\n\nHi ${recipientName},\n\n${textContent}${raidLogInfo && raidLogInfo.length > 0 ? `\n\nRelated Project Information:\n${raidLogInfo.map(item => `${item.type.toUpperCase()}: ${item.title}\n${item.description}`).join('\n\n')}` : ''}\n\nBest regards,\n${senderName}\n\nProject: ${projectName}\nThis is a personal communication from your change initiative team.\n\nGenerated by Essayons Change Platform`;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textVersion,
    html
  });
}
// Meeting invitation and calendar integration functions

export async function sendMeetingInvite(
  recipientEmail: string,
  meetingData: {
    title: string;
    description: string;
    startTime: string; // ISO string
    endTime: string; // ISO string
    location: string;
    organizerName: string;
    organizerEmail: string;
    agenda: Array<{
      item: string;
      timeAllocation: number;
    }>;
    preparation?: string;
    projectName: string;
  },
  inviteContent: {
    subject: string;
    htmlContent: string;
    textContent: string;
  }
): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    console.log('Meeting invite skipped - SendGrid not configured');
    return false;
  }

  // Generate calendar invite (ICS format)
  const calendarInvite = generateICSCalendarInvite(meetingData);
  
  try {
    await mailService.send({
      to: recipientEmail,
      from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
      subject: inviteContent.subject,
      text: inviteContent.textContent,
      html: inviteContent.htmlContent,
      attachments: [
        {
          content: Buffer.from(calendarInvite).toString('base64'),
          filename: 'meeting.ics',
          type: 'text/calendar',
          disposition: 'attachment'
        }
      ]
    });
    
    console.log(`Meeting invite sent successfully to ${recipientEmail}`);
    return true;
  } catch (error) {
    console.error('SendGrid meeting invite error:', error);
    return false;
  }
}

export async function sendBulkMeetingInvites(
  recipients: Array<{
    email: string;
    name: string;
    role?: string;
  }>,
  meetingData: {
    title: string;
    description: string;
    startTime: string;
    endTime: string;
    location: string;
    organizerName: string;
    organizerEmail: string;
    agenda: Array<{
      item: string;
      timeAllocation: number;
    }>;
    preparation?: string;
    projectName: string;
  },
  inviteContent: {
    subject: string;
    htmlContent: string;
    textContent: string;
  }
): Promise<{ sent: number; failed: number; results: Array<{ email: string; success: boolean; error?: string }> }> {
  const results: Array<{ email: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  // Send invites with rate limiting
  for (const recipient of recipients) {
    try {
      // Personalize content with recipient name
      const personalizedContent = {
        ...inviteContent,
        htmlContent: inviteContent.htmlContent.replace(/\[RECIPIENT_NAME\]/g, recipient.name),
        textContent: inviteContent.textContent.replace(/\[RECIPIENT_NAME\]/g, recipient.name)
      };

      const success = await sendMeetingInvite(recipient.email, meetingData, personalizedContent);
      if (success) {
        sent++;
        results.push({ email: recipient.email, success: true });
      } else {
        failed++;
        results.push({ email: recipient.email, success: false, error: 'Send failed' });
      }
      
      // Rate limiting: wait 200ms between emails
      await new Promise(resolve => setTimeout(resolve, 200));
    } catch (error) {
      failed++;
      results.push({ 
        email: recipient.email, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}

function generateICSCalendarInvite(meetingData: {
  title: string;
  description: string;
  startTime: string;
  endTime: string;
  location: string;
  organizerName: string;
  organizerEmail: string;
  agenda: Array<{
    item: string;
    timeAllocation: number;
  }>;
  preparation?: string;
}): string {
  const startDate = new Date(meetingData.startTime);
  const endDate = new Date(meetingData.endTime);
  
  // Format dates for ICS (YYYYMMDDTHHMMSSZ)
  const formatICSDate = (date: Date): string => {
    return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  };

  const startICS = formatICSDate(startDate);
  const endICS = formatICSDate(endDate);
  const nowICS = formatICSDate(new Date());

  // Generate unique UID
  const uid = `meeting-${Date.now()}@changemanagement.com`;

  // Build agenda text
  const agendaText = meetingData.agenda.length > 0 
    ? `\\n\\nAGENDA:\\n${meetingData.agenda.map(item => `• ${item.item} (${item.timeAllocation} min)`).join('\\n')}`
    : '';
  
  const preparationText = meetingData.preparation 
    ? `\\n\\nPREPARATION:\\n${meetingData.preparation}`
    : '';

  const description = meetingData.description + agendaText + preparationText;

  const icsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Essayons Change Platform//Meeting Scheduler//EN
CALSCALE:GREGORIAN
METHOD:REQUEST
BEGIN:VEVENT
UID:${uid}
DTSTART:${startICS}
DTEND:${endICS}
DTSTAMP:${nowICS}
ORGANIZER;CN=${meetingData.organizerName}:MAILTO:${meetingData.organizerEmail}
SUMMARY:${meetingData.title}
DESCRIPTION:${description.replace(/\n/g, '\\n')}
LOCATION:${meetingData.location}
STATUS:CONFIRMED
SEQUENCE:0
END:VEVENT
END:VCALENDAR`;

  return icsContent;
}

export async function sendMeetingCancellation(
  recipientEmail: string,
  meetingData: {
    title: string;
    originalStartTime: string;
    organizerName: string;
    organizerEmail: string;
    cancellationReason?: string;
  }
): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    console.log('Meeting cancellation skipped - SendGrid not configured');
    return false;
  }

  const subject = `Meeting Cancelled: ${meetingData.title}`;
  const reason = meetingData.cancellationReason || 'No reason provided';
  
  const htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #832c2c; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">Meeting Cancelled</h1>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <h2 style="color: #832c2c;">${meetingData.title}</h2>
        <p style="font-size: 16px; margin-bottom: 20px;">
          This meeting scheduled for ${new Date(meetingData.originalStartTime).toLocaleString()} has been cancelled.
        </p>
        
        <div style="background-color: #f8f9fa; padding: 15px; border-left: 4px solid #832c2c; margin: 20px 0;">
          <strong>Reason:</strong> ${reason}
        </div>
        
        <p style="margin-top: 20px;">
          If you have any questions, please contact ${meetingData.organizerName} at ${meetingData.organizerEmail}.
        </p>
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const textContent = `Meeting Cancelled: ${meetingData.title}

This meeting scheduled for ${new Date(meetingData.originalStartTime).toLocaleString()} has been cancelled.

Reason: ${reason}

If you have any questions, please contact ${meetingData.organizerName} at ${meetingData.organizerEmail}.

Generated by Essayons Change Platform`;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textContent,
    html: htmlContent
  });
}

export async function sendMeetingReminder(
  recipientEmail: string,
  meetingData: {
    title: string;
    startTime: string;
    location: string;
    agenda: Array<{
      item: string;
      timeAllocation: number;
    }>;
    preparation?: string;
    projectName: string;
  },
  reminderType: 'day_before' | 'hour_before' | 'fifteen_minutes'
): Promise<boolean> {
  if (!process.env.SENDGRID_API_KEY) {
    console.log('Meeting reminder skipped - SendGrid not configured');
    return false;
  }

  const timeframes = {
    day_before: '24 hours',
    hour_before: '1 hour',
    fifteen_minutes: '15 minutes'
  };

  const subject = `Meeting Reminder: ${meetingData.title} - ${timeframes[reminderType]}`;
  
  const agendaHtml = meetingData.agenda.length > 0
    ? `<h3 style="color: #832c2c; margin-top: 25px;">Agenda</h3>
       <ul style="margin: 10px 0;">
         ${meetingData.agenda.map(item => 
           `<li style="margin: 8px 0;">${item.item} <em>(${item.timeAllocation} min)</em></li>`
         ).join('')}
       </ul>`
    : '';

  const preparationHtml = meetingData.preparation
    ? `<h3 style="color: #832c2c; margin-top: 25px;">Preparation Required</h3>
       <div style="background-color: #f8f9fa; padding: 15px; border-left: 4px solid #832c2c; margin: 10px 0;">
         ${meetingData.preparation}
       </div>`
    : '';

  const htmlContent = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #832c2c; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">Meeting Reminder</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">In ${timeframes[reminderType]}</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <h2 style="color: #832c2c; margin-top: 0;">${meetingData.title}</h2>
        
        <div style="margin: 20px 0;">
          <p><strong>Time:</strong> ${new Date(meetingData.startTime).toLocaleString()}</p>
          <p><strong>Location:</strong> ${meetingData.location}</p>
          <p><strong>Project:</strong> ${meetingData.projectName}</p>
        </div>
        
        ${agendaHtml}
        ${preparationHtml}
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const agendaText = meetingData.agenda.length > 0
    ? `\n\nAgenda:\n${meetingData.agenda.map(item => `- ${item.item} (${item.timeAllocation} min)`).join('\n')}`
    : '';

  const preparationText = meetingData.preparation
    ? `\n\nPreparation Required:\n${meetingData.preparation}`
    : '';

  const textContent = `Meeting Reminder: ${meetingData.title}

Time: ${new Date(meetingData.startTime).toLocaleString()}
Location: ${meetingData.location}
Project: ${meetingData.projectName}
${agendaText}
${preparationText}

Generated by Essayons Change Platform`;

  return sendEmail({
    to: recipientEmail,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textContent,
    html: htmlContent
  });
}
