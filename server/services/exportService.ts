import PptxGenJS from "pptxgenjs";
import { PDFDocument, rgb } from "pdf-lib";
import { writeFileSync, mkdirSync, existsSync } from "fs";
import { join } from "path";
import type { Communication } from "@shared/schema";

export class ExportService {
  private ensureExportsDir() {
    const exportsDir = join(process.cwd(), "exports");
    if (!existsSync(exportsDir)) {
      mkdirSync(exportsDir, { recursive: true });
    }
    return exportsDir;
  }

  async exportToPowerPoint(communication: Communication): Promise<string> {
    const pptx = new PptxGenJS();
    pptx.author = "Essayons Change Platform";
    pptx.company = "Change Management";
    pptx.title = communication.title;

    // Create title slide
    const titleSlide = pptx.addSlide();
    
    // Add company branding background
    titleSlide.background = { color: "F5F5F5" };
    
    // Title
    titleSlide.addText(communication.title, {
      x: 0.5,
      y: 1.5,
      w: 9,
      h: 1.5,
      fontSize: 36,
      bold: true,
      color: "2E5266",
      align: "center"
    });

    // Subtitle/Change Initiative
    titleSlide.addText("Change Initiative Communication", {
      x: 0.5,
      y: 3,
      w: 9,
      h: 0.5,
      fontSize: 18,
      color: "5A7684",
      align: "center"
    });

    // Content slide
    const contentSlide = pptx.addSlide();
    contentSlide.background = { color: "FFFFFF" };

    // Header with company branding
    contentSlide.addText("Essayons Change Platform", {
      x: 0.5,
      y: 0.5,
      w: 4,
      h: 0.5,
      fontSize: 14,
      bold: true,
      color: "2E5266"
    });

    // Main content
    const contentLines = communication.content.split('\n').filter(line => line.trim());
    let yPosition = 1.5;
    
    contentLines.forEach((line, index) => {
      if (line.trim()) {
        contentSlide.addText(line.trim(), {
          x: 0.5,
          y: yPosition,
          w: 9,
          h: 0.4,
          fontSize: 16,
          color: "333333",
          margin: 0.1
        });
        yPosition += 0.5;
      }
    });

    // Call to action section if available
    if (communication.content.toLowerCase().includes('call to action') || 
        communication.content.toLowerCase().includes('next steps')) {
      
      const ctaSlide = pptx.addSlide();
      ctaSlide.background = { color: "F8F9FA" };
      
      ctaSlide.addText("Next Steps", {
        x: 0.5,
        y: 1,
        w: 9,
        h: 1,
        fontSize: 28,
        bold: true,
        color: "2E5266",
        align: "center"
      });

      ctaSlide.addText("For questions or support, please contact your change management team.", {
        x: 0.5,
        y: 4,
        w: 9,
        h: 1,
        fontSize: 16,
        color: "5A7684",
        align: "center"
      });
    }

    // Save the presentation
    const exportsDir = this.ensureExportsDir();
    const filename = `flyer-${communication.id}.pptx`;
    const filepath = join(exportsDir, filename);
    
    await pptx.writeFile({ fileName: filepath });
    
    return `/exports/${filename}`;
  }

  async exportToPDF(communication: Communication): Promise<string> {
    const pdfDoc = await PDFDocument.create();
    const page = pdfDoc.addPage([612, 792]); // US Letter size

    // Create branded PDF layout
    const { width, height } = page.getSize();
    
    // Header background
    page.drawRectangle({
      x: 0,
      y: height - 100,
      width: width,
      height: 100,
      color: rgb(0.18, 0.32, 0.4), // Brand color #2E5266
    });

    // Title
    page.drawText(communication.title, {
      x: 50,
      y: height - 60,
      size: 24,
      color: rgb(1, 1, 1), // White text
    });

    // Subtitle
    page.drawText("Change Initiative Communication", {
      x: 50,
      y: height - 85,
      size: 14,
      color: rgb(0.9, 0.9, 0.9),
    });

    // Content area
    const contentLines = communication.content.split('\n').filter(line => line.trim());
    let yPosition = height - 150;
    
    contentLines.forEach((line, index) => {
      if (line.trim() && yPosition > 50) {
        page.drawText(line.trim(), {
          x: 50,
          y: yPosition,
          size: 12,
          color: rgb(0.2, 0.2, 0.2),
          maxWidth: width - 100,
        });
        yPosition -= 20;
      }
    });

    // Footer
    page.drawText("Generated by Essayons Change Platform", {
      x: 50,
      y: 30,
      size: 10,
      color: rgb(0.5, 0.5, 0.5),
    });

    // Save PDF
    const exportsDir = this.ensureExportsDir();
    const filename = `flyer-${communication.id}.pdf`;
    const filepath = join(exportsDir, filename);
    
    const pdfBytes = await pdfDoc.save();
    writeFileSync(filepath, pdfBytes);
    
    return `/exports/${filename}`;
  }

  async exportToCanvaPNG(communication: Communication): Promise<string> {
    // PNG export temporarily disabled for cloud deployment compatibility
    // This feature required native dependencies not available in serverless environments
    throw new Error("PNG export is currently not available. Please use PowerPoint export instead.");
  }

  private wrapText(text: string, maxLength: number): string {
    if (text.length <= maxLength) return text;
    
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';
    
    words.forEach(word => {
      if ((currentLine + word).length <= maxLength) {
        currentLine += (currentLine ? ' ' : '') + word;
      } else {
        if (currentLine) lines.push(currentLine);
        currentLine = word;
      }
    });
    
    if (currentLine) lines.push(currentLine);
    return lines.join('\n');
  }

  // Helper method for text wrapping (kept for potential future use)
  private wrapTextToLines(text: string, maxLineLength: number): string[] {
    const words = text.split(' ');
    const lines: string[] = [];
    let currentLine = '';

    words.forEach(word => {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      
      if (testLine.length > maxLineLength && currentLine) {
        lines.push(currentLine);
        currentLine = word;
      } else {
        currentLine = testLine;
      }
    });

    if (currentLine) {
      lines.push(currentLine);
    }

    return lines;
  }
}

export const exportService = new ExportService();