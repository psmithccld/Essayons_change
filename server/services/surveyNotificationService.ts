import { sendEmail } from './emailService.js';
import type { Survey, Stakeholder } from '@shared/schema';

interface SurveyInvitationData {
  survey: Survey;
  stakeholder: Stakeholder;
  surveyUrl: string;
  projectName?: string;
}

export async function sendSurveyInvitation(data: SurveyInvitationData): Promise<boolean> {
  const { survey, stakeholder, surveyUrl, projectName } = data;
  
  const subject = `Survey Invitation: ${survey.title}`;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #2E5266; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">${survey.title}</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">Survey Invitation</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <p style="color: #333333; font-size: 16px; margin-bottom: 20px;">
          Hello ${stakeholder.name},
        </p>
        
        <p style="color: #333333; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
          You've been invited to participate in an important survey for our change initiative${projectName ? ` in the ${projectName} project` : ''}.
        </p>
        
        ${survey.description ? `
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #2E5266; font-size: 18px; margin-bottom: 10px;">About This Survey</h3>
            <p style="color: #555; font-size: 14px; line-height: 1.5; margin: 0;">${survey.description}</p>
          </div>
        ` : ''}
        
        <div style="background-color: #e8f4f8; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #2E5266; font-size: 16px; margin-bottom: 10px;">Survey Details</h3>
          <ul style="color: #555; font-size: 14px; line-height: 1.6; margin: 0; padding-left: 20px;">
            <li>Expected completion time: 5-10 minutes</li>
            ${survey.endDate ? `<li>Survey closes: ${new Date(survey.endDate).toLocaleDateString()}</li>` : ''}
            <li>Your responses will be kept confidential</li>
            <li>Your feedback is valuable for our change process</li>
          </ul>
        </div>
        
        <div style="text-align: center; margin: 30px 0;">
          <a href="${surveyUrl}" 
             style="background-color: #2E5266; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; font-weight: bold; display: inline-block;">
            Take Survey Now
          </a>
        </div>
        
        <p style="color: #666; font-size: 14px; line-height: 1.5; margin-top: 30px;">
          <strong>Having trouble with the link above?</strong><br>
          Copy and paste this URL into your browser: <br>
          <span style="color: #2E5266; word-break: break-all;">${surveyUrl}</span>
        </p>
        
        <p style="color: #666; font-size: 14px; line-height: 1.5; margin-top: 20px;">
          Thank you for your participation in this important initiative. Your feedback helps us ensure successful change implementation.
        </p>
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          ${projectName ? `<strong>Project:</strong> ${projectName}<br>` : ''}
          This survey invitation was sent as part of our change management process.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const textVersion = `
Survey Invitation: ${survey.title}

Hello ${stakeholder.name},

You've been invited to participate in an important survey for our change initiative${projectName ? ` in the ${projectName} project` : ''}.

${survey.description ? `About This Survey:\n${survey.description}\n\n` : ''}

Survey Details:
- Expected completion time: 5-10 minutes
${survey.endDate ? `- Survey closes: ${new Date(survey.endDate).toLocaleDateString()}\n` : ''}- Your responses will be kept confidential
- Your feedback is valuable for our change process

Take the survey here: ${surveyUrl}

Thank you for your participation in this important initiative. Your feedback helps us ensure successful change implementation.

${projectName ? `Project: ${projectName}\n` : ''}Generated by Essayons Change Platform
`;

  return sendEmail({
    to: stakeholder.email!,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textVersion,
    html
  });
}

export async function sendSurveyReminder(data: SurveyInvitationData): Promise<boolean> {
  const { survey, stakeholder, surveyUrl, projectName } = data;
  
  const subject = `Reminder: ${survey.title} - Survey Response Needed`;
  
  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #f39c12; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">Survey Reminder</h1>
        <p style="margin: 10px 0 0 0; font-size: 14px;">${survey.title}</p>
      </div>
      
      <div style="padding: 30px; background-color: #ffffff;">
        <p style="color: #333333; font-size: 16px; margin-bottom: 20px;">
          Hello ${stakeholder.name},
        </p>
        
        <p style="color: #333333; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
          This is a friendly reminder that you haven't yet completed the survey for our change initiative${projectName ? ` in the ${projectName} project` : ''}. Your input is important to us!
        </p>
        
        ${survey.endDate ? `
          <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <p style="color: #856404; font-size: 14px; margin: 0;">
              <strong>Survey closes on ${new Date(survey.endDate).toLocaleDateString()}</strong> - Please complete it soon!
            </p>
          </div>
        ` : ''}
        
        <div style="text-align: center; margin: 30px 0;">
          <a href="${surveyUrl}" 
             style="background-color: #f39c12; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-size: 16px; font-weight: bold; display: inline-block;">
            Complete Survey Now
          </a>
        </div>
        
        <p style="color: #666; font-size: 14px; line-height: 1.5; margin-top: 30px;">
          <strong>Having trouble with the link above?</strong><br>
          Copy and paste this URL into your browser: <br>
          <span style="color: #f39c12; word-break: break-all;">${surveyUrl}</span>
        </p>
      </div>
      
      <div style="background-color: #F8F9FA; padding: 20px; text-align: center; border-top: 1px solid #e9ecef;">
        <p style="margin: 0; color: #5A7684; font-size: 14px;">
          ${projectName ? `<strong>Project:</strong> ${projectName}<br>` : ''}
          This reminder was sent as part of our change management process.
        </p>
        <p style="margin: 10px 0 0 0; color: #5A7684; font-size: 12px;">
          Generated by Essayons Change Platform
        </p>
      </div>
    </div>
  `;

  const textVersion = `
Survey Reminder: ${survey.title}

Hello ${stakeholder.name},

This is a friendly reminder that you haven't yet completed the survey for our change initiative${projectName ? ` in the ${projectName} project` : ''}. Your input is important to us!

${survey.endDate ? `Survey closes on ${new Date(survey.endDate).toLocaleDateString()} - Please complete it soon!\n\n` : ''}

Complete the survey here: ${surveyUrl}

${projectName ? `Project: ${projectName}\n` : ''}Generated by Essayous Change Platform
`;

  return sendEmail({
    to: stakeholder.email!,
    from: process.env.FROM_EMAIL || 'noreply@changemanagement.com',
    subject,
    text: textVersion,
    html
  });
}

export async function sendBulkSurveyInvitations(
  survey: Survey, 
  stakeholders: Stakeholder[],
  baseUrl: string,
  projectName?: string
): Promise<{ sent: number; failed: number; results: Array<{ stakeholderId: string; success: boolean; error?: string }> }> {
  const results: Array<{ stakeholderId: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  const surveyUrl = `${baseUrl}/surveys/take/${survey.id}`;

  // Send invitations with rate limiting (SendGrid has rate limits)
  for (const stakeholder of stakeholders) {
    if (!stakeholder.email) {
      failed++;
      results.push({ 
        stakeholderId: stakeholder.id, 
        success: false, 
        error: 'No email address provided' 
      });
      continue;
    }

    try {
      const success = await sendSurveyInvitation({
        survey,
        stakeholder,
        surveyUrl,
        projectName
      });
      
      if (success) {
        sent++;
        results.push({ stakeholderId: stakeholder.id, success: true });
      } else {
        failed++;
        results.push({ 
          stakeholderId: stakeholder.id, 
          success: false, 
          error: 'Send failed' 
        });
      }
      
      // Rate limiting: wait 100ms between emails to avoid hitting SendGrid limits
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      results.push({ 
        stakeholderId: stakeholder.id, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}

export async function sendBulkSurveyReminders(
  survey: Survey, 
  stakeholders: Stakeholder[],
  baseUrl: string,
  projectName?: string
): Promise<{ sent: number; failed: number; results: Array<{ stakeholderId: string; success: boolean; error?: string }> }> {
  const results: Array<{ stakeholderId: string; success: boolean; error?: string }> = [];
  let sent = 0;
  let failed = 0;

  const surveyUrl = `${baseUrl}/surveys/take/${survey.id}`;

  // Send reminders with rate limiting
  for (const stakeholder of stakeholders) {
    if (!stakeholder.email) {
      failed++;
      results.push({ 
        stakeholderId: stakeholder.id, 
        success: false, 
        error: 'No email address provided' 
      });
      continue;
    }

    try {
      const success = await sendSurveyReminder({
        survey,
        stakeholder,
        surveyUrl,
        projectName
      });
      
      if (success) {
        sent++;
        results.push({ stakeholderId: stakeholder.id, success: true });
      } else {
        failed++;
        results.push({ 
          stakeholderId: stakeholder.id, 
          success: false, 
          error: 'Send failed' 
        });
      }
      
      // Rate limiting: wait 100ms between emails
      await new Promise(resolve => setTimeout(resolve, 100));
    } catch (error) {
      failed++;
      results.push({ 
        stakeholderId: stakeholder.id, 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error' 
      });
    }
  }

  return { sent, failed, results };
}